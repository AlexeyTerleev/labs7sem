 Язык для работы с множествами
 1: Встроенные типы: element, set
 2: Операции: переопределить +, -, *, \ и т.д. для встроенных типов


 Требования к разрабатываемому языку
 1: Встроенные типы не менее трех
 2: Возможность инициализация переменных всех типов при объявлении: <имя_переменной> = <выражение>
      2.1: Инициализирующее выражение может быть константным
 3: Встроенные операции не менее 10 штук
 4: Встроенные функции
       4.1: Встроенные функции ввода\вывода для работы со встроенными типами read() write()
 5: Использование сложных выражений (составных и со скобками)
 6: Блочный оператор
 7: Управляющие структуры
       7.1: Условный оператор (if-then-else)
       7.2: Операторы цикла (while и until)
       7.3: Оператор цикла с итерациями (for)
 8: Пользовательские подпрограммы
       8.1: Передача и возврат параметров
       8.2: Задание локальной и глобальной области видимости для имен переменных


 Свойства языка:
 1: Объявление переменных - не явное
 2: Преобразование типов - не явное
 3: Оператор присваивания - одноцелевой, например, a = b
 4: Структуры, ограничивающие область видимости - подпрограммы и блочные операторы
 5: Маркер блочного оператора - явный
 6: Условные операторы - двух вариантный оператор if-then-else
 7: Перегрузка подпрограмм - отсутствует
 8: Передача параметров в подпрограмму - по значению и результату
 9: Допустимое место объявления подпрограмм - в начале программы


Structures:

read() -> string
print(string) -> None

type Element:
    value: string

type Set:
    elements: List[Element]

    // Операции
    + (otherSet: Set) -> Set - объединение
    * (otherSet: Set) -> Set - пересечение
    - (otherSet: Set) -> Set - разность
    ^ (otherSet: Set) -> Set - симметрическая разность

    // Методы
    add(element: Element) -> None
    remove(element: Element) -> None
    contains(element: Element) -> bool
    size() -> int
    isEmpty() -> bool
    clear() -> None

 Exapmle 2:

def processSet(mySet)
{
    if mySet.isEmpty()
    {
        print("Set is empty")
    }
    else
    {
        for element in mySet.elements
        {
            print("Element:", element.value)
        }
    }
}
        


def main()
{
    mySet = Set()
    mySet.add(Element("item1"))
    mySet.add(Element("item2"))

    processSet(mySet)
}


 Exapmle 3:

def main(xmlString)
{
    processSet(mySet)
    mySet = Set()
    mySet.add(Element("item1"))
    mySet.add(Element("item2"))
    mySet.add(Element("unknowItem"))

    if mySet.contains(Element("unknowItem"))
    {
        mySet.remove(Element("unknowItem"))
    }
}


def process(el1, el2)
{
    newSet = Set()
    newSet.add(el1)
    newSet.add(el2)
    return newSet
}

def main()
{
    el1 = Element("banana")
    el2 = Element("apple")

    mySet = process(el1, el2)

    for element in mySet
    {
        print(element)
    }
}
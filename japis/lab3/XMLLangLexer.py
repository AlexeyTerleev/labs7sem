# Generated from XMLLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,321,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,1,2,1,2,1,2,5,2,105,8,2,10,
        2,12,2,108,9,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,4,25,226,8,25,11,25,12,25,
        227,1,25,1,25,1,26,1,26,3,26,234,8,26,1,26,1,26,3,26,238,8,26,1,
        26,3,26,241,8,26,3,26,243,8,26,1,27,1,27,5,27,247,8,27,10,27,12,
        27,250,9,27,1,28,1,28,5,28,254,8,28,10,28,12,28,257,9,28,1,28,4,
        28,260,8,28,11,28,12,28,261,3,28,264,8,28,1,29,1,29,1,30,1,30,1,
        30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,
        35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,
        41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,3,43,304,8,43,1,44,1,44,1,
        45,1,45,1,46,4,46,311,8,46,11,46,12,46,312,1,47,1,47,5,47,317,8,
        47,10,47,12,47,320,9,47,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,0,89,0,91,0,93,0,95,0,1,0,8,4,0,10,10,12,13,34,
        34,92,92,3,0,9,10,12,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,9,9,32,32,2,0,10,10,12,13,
        329,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,97,1,0,0,0,3,99,1,0,0,0,
        5,101,1,0,0,0,7,111,1,0,0,0,9,113,1,0,0,0,11,117,1,0,0,0,13,123,
        1,0,0,0,15,128,1,0,0,0,17,137,1,0,0,0,19,141,1,0,0,0,21,146,1,0,
        0,0,23,153,1,0,0,0,25,159,1,0,0,0,27,167,1,0,0,0,29,171,1,0,0,0,
        31,174,1,0,0,0,33,177,1,0,0,0,35,184,1,0,0,0,37,189,1,0,0,0,39,193,
        1,0,0,0,41,196,1,0,0,0,43,202,1,0,0,0,45,209,1,0,0,0,47,214,1,0,
        0,0,49,218,1,0,0,0,51,225,1,0,0,0,53,242,1,0,0,0,55,244,1,0,0,0,
        57,263,1,0,0,0,59,265,1,0,0,0,61,267,1,0,0,0,63,270,1,0,0,0,65,273,
        1,0,0,0,67,276,1,0,0,0,69,279,1,0,0,0,71,281,1,0,0,0,73,283,1,0,
        0,0,75,285,1,0,0,0,77,287,1,0,0,0,79,289,1,0,0,0,81,291,1,0,0,0,
        83,294,1,0,0,0,85,297,1,0,0,0,87,303,1,0,0,0,89,305,1,0,0,0,91,307,
        1,0,0,0,93,310,1,0,0,0,95,314,1,0,0,0,97,98,5,123,0,0,98,2,1,0,0,
        0,99,100,5,125,0,0,100,4,1,0,0,0,101,106,5,34,0,0,102,105,3,87,43,
        0,103,105,8,0,0,0,104,102,1,0,0,0,104,103,1,0,0,0,105,108,1,0,0,
        0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,
        0,109,110,5,34,0,0,110,6,1,0,0,0,111,112,3,57,28,0,112,8,1,0,0,0,
        113,114,5,97,0,0,114,115,5,110,0,0,115,116,5,100,0,0,116,10,1,0,
        0,0,117,118,5,98,0,0,118,119,5,114,0,0,119,120,5,101,0,0,120,121,
        5,97,0,0,121,122,5,107,0,0,122,12,1,0,0,0,123,124,5,99,0,0,124,125,
        5,97,0,0,125,126,5,115,0,0,126,127,5,101,0,0,127,14,1,0,0,0,128,
        129,5,99,0,0,129,130,5,111,0,0,130,131,5,110,0,0,131,132,5,116,0,
        0,132,133,5,105,0,0,133,134,5,110,0,0,134,135,5,117,0,0,135,136,
        5,101,0,0,136,16,1,0,0,0,137,138,5,100,0,0,138,139,5,101,0,0,139,
        140,5,102,0,0,140,18,1,0,0,0,141,142,5,101,0,0,142,143,5,108,0,0,
        143,144,5,115,0,0,144,145,5,101,0,0,145,20,1,0,0,0,146,147,5,101,
        0,0,147,148,5,120,0,0,148,149,5,99,0,0,149,150,5,101,0,0,150,151,
        5,112,0,0,151,152,5,116,0,0,152,22,1,0,0,0,153,154,5,70,0,0,154,
        155,5,97,0,0,155,156,5,108,0,0,156,157,5,115,0,0,157,158,5,101,0,
        0,158,24,1,0,0,0,159,160,5,102,0,0,160,161,5,105,0,0,161,162,5,110,
        0,0,162,163,5,97,0,0,163,164,5,108,0,0,164,165,5,108,0,0,165,166,
        5,121,0,0,166,26,1,0,0,0,167,168,5,102,0,0,168,169,5,111,0,0,169,
        170,5,114,0,0,170,28,1,0,0,0,171,172,5,105,0,0,172,173,5,102,0,0,
        173,30,1,0,0,0,174,175,5,105,0,0,175,176,5,110,0,0,176,32,1,0,0,
        0,177,178,5,115,0,0,178,179,5,119,0,0,179,180,5,105,0,0,180,181,
        5,116,0,0,181,182,5,99,0,0,182,183,5,104,0,0,183,34,1,0,0,0,184,
        185,5,78,0,0,185,186,5,111,0,0,186,187,5,110,0,0,187,188,5,101,0,
        0,188,36,1,0,0,0,189,190,5,110,0,0,190,191,5,111,0,0,191,192,5,116,
        0,0,192,38,1,0,0,0,193,194,5,111,0,0,194,195,5,114,0,0,195,40,1,
        0,0,0,196,197,5,114,0,0,197,198,5,97,0,0,198,199,5,105,0,0,199,200,
        5,115,0,0,200,201,5,101,0,0,201,42,1,0,0,0,202,203,5,114,0,0,203,
        204,5,101,0,0,204,205,5,116,0,0,205,206,5,117,0,0,206,207,5,114,
        0,0,207,208,5,110,0,0,208,44,1,0,0,0,209,210,5,84,0,0,210,211,5,
        114,0,0,211,212,5,117,0,0,212,213,5,101,0,0,213,46,1,0,0,0,214,215,
        5,116,0,0,215,216,5,114,0,0,216,217,5,121,0,0,217,48,1,0,0,0,218,
        219,5,119,0,0,219,220,5,104,0,0,220,221,5,105,0,0,221,222,5,108,
        0,0,222,223,5,101,0,0,223,50,1,0,0,0,224,226,7,1,0,0,225,224,1,0,
        0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,229,1,0,
        0,0,229,230,6,25,0,0,230,52,1,0,0,0,231,243,3,93,46,0,232,234,5,
        13,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,238,5,
        10,0,0,236,238,2,12,13,0,237,233,1,0,0,0,237,236,1,0,0,0,238,240,
        1,0,0,0,239,241,3,93,46,0,240,239,1,0,0,0,240,241,1,0,0,0,241,243,
        1,0,0,0,242,231,1,0,0,0,242,237,1,0,0,0,243,54,1,0,0,0,244,248,7,
        2,0,0,245,247,7,3,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,
        0,0,0,248,249,1,0,0,0,249,56,1,0,0,0,250,248,1,0,0,0,251,255,3,89,
        44,0,252,254,3,91,45,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,
        0,0,0,255,256,1,0,0,0,256,264,1,0,0,0,257,255,1,0,0,0,258,260,5,
        48,0,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,
        0,0,0,262,264,1,0,0,0,263,251,1,0,0,0,263,259,1,0,0,0,264,58,1,0,
        0,0,265,266,5,46,0,0,266,60,1,0,0,0,267,268,5,40,0,0,268,269,6,30,
        1,0,269,62,1,0,0,0,270,271,5,41,0,0,271,272,6,31,2,0,272,64,1,0,
        0,0,273,274,5,91,0,0,274,275,6,32,3,0,275,66,1,0,0,0,276,277,5,93,
        0,0,277,278,6,33,4,0,278,68,1,0,0,0,279,280,5,44,0,0,280,70,1,0,
        0,0,281,282,5,58,0,0,282,72,1,0,0,0,283,284,5,59,0,0,284,74,1,0,
        0,0,285,286,5,61,0,0,286,76,1,0,0,0,287,288,5,43,0,0,288,78,1,0,
        0,0,289,290,5,45,0,0,290,80,1,0,0,0,291,292,5,61,0,0,292,293,5,61,
        0,0,293,82,1,0,0,0,294,295,5,33,0,0,295,296,5,61,0,0,296,84,1,0,
        0,0,297,298,9,0,0,0,298,86,1,0,0,0,299,300,5,92,0,0,300,304,9,0,
        0,0,301,302,5,92,0,0,302,304,3,53,26,0,303,299,1,0,0,0,303,301,1,
        0,0,0,304,88,1,0,0,0,305,306,7,4,0,0,306,90,1,0,0,0,307,308,7,5,
        0,0,308,92,1,0,0,0,309,311,7,6,0,0,310,309,1,0,0,0,311,312,1,0,0,
        0,312,310,1,0,0,0,312,313,1,0,0,0,313,94,1,0,0,0,314,318,5,35,0,
        0,315,317,8,7,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,
        0,318,319,1,0,0,0,319,96,1,0,0,0,320,318,1,0,0,0,15,0,104,106,227,
        233,237,240,242,248,255,261,263,303,312,318,5,6,0,0,1,30,0,1,31,
        1,1,32,2,1,33,3
    ]

class XMLLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INDENT = 1
    DEDENT = 2
    STRING = 3
    NUMBER = 4
    AND = 5
    BREAK = 6
    CASE = 7
    CONTINUE = 8
    DEF = 9
    ELSE = 10
    EXCEPT = 11
    FALSE = 12
    FINALLY = 13
    FOR = 14
    IF = 15
    IN = 16
    SWITCH = 17
    NONE = 18
    NOT = 19
    OR = 20
    RAISE = 21
    RETURN = 22
    TRUE = 23
    TRY = 24
    WHILE = 25
    WS = 26
    NEWLINE = 27
    ID = 28
    DECIMAL_INTEGER = 29
    DOT = 30
    OPEN_PAREN = 31
    CLOSE_PAREN = 32
    OPEN_BRACK = 33
    CLOSE_BRACK = 34
    COMMA = 35
    COLON = 36
    SEMI_COLON = 37
    ASSIGN = 38
    ADD = 39
    MINUS = 40
    EQUALS = 41
    NOT_EQ_2 = 42
    UNKNOWN_CHAR = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'and'", "'break'", "'case'", "'continue'", "'def'", 
            "'else'", "'except'", "'False'", "'finally'", "'for'", "'if'", 
            "'in'", "'switch'", "'None'", "'not'", "'or'", "'raise'", "'return'", 
            "'True'", "'try'", "'while'", "'.'", "'('", "')'", "'['", "']'", 
            "','", "':'", "';'", "'='", "'+'", "'-'", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "STRING", "NUMBER", "AND", "BREAK", "CASE", 
            "CONTINUE", "DEF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
            "IF", "IN", "SWITCH", "NONE", "NOT", "OR", "RAISE", "RETURN", 
            "TRUE", "TRY", "WHILE", "WS", "NEWLINE", "ID", "DECIMAL_INTEGER", 
            "DOT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
            "COMMA", "COLON", "SEMI_COLON", "ASSIGN", "ADD", "MINUS", "EQUALS", 
            "NOT_EQ_2", "UNKNOWN_CHAR" ]

    ruleNames = [ "INDENT", "DEDENT", "STRING", "NUMBER", "AND", "BREAK", 
                  "CASE", "CONTINUE", "DEF", "ELSE", "EXCEPT", "FALSE", 
                  "FINALLY", "FOR", "IF", "IN", "SWITCH", "NONE", "NOT", 
                  "OR", "RAISE", "RETURN", "TRUE", "TRY", "WHILE", "WS", 
                  "NEWLINE", "ID", "DECIMAL_INTEGER", "DOT", "OPEN_PAREN", 
                  "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", "COMMA", "COLON", 
                  "SEMI_COLON", "ASSIGN", "ADD", "MINUS", "EQUALS", "NOT_EQ_2", 
                  "UNKNOWN_CHAR", "STRING_ESCAPE_SEQ", "NON_ZERO_DIGIT", 
                  "DIGIT", "SPACES", "COMMENT" ]

    grammarFileName = "XMLLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[30] = self.OPEN_PAREN_action 
            actions[31] = self.CLOSE_PAREN_action 
            actions[32] = self.OPEN_BRACK_action 
            actions[33] = self.CLOSE_BRACK_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))

    def openBrace(self):
        pass

    def closeBrace(self):
        pass

    def OPEN_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.openBrace();
     

    def CLOSE_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.closeBrace();
     

    def OPEN_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.openBrace();
     

    def CLOSE_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.closeBrace();
     


